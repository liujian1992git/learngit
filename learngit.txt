git相关
1、创建仓库目录
2、git init   将当前目录设置为git管理的仓库
3、git add XXX  添加文件至仓库
4、git commit   将文件提交至仓库
5、git commit -m "XXXX"  添加本次提交注释
6、git log 查看日志
7、git log --pretty=oneline   只看最新日志
8、git reset --hard HEAD^     回滚上一个版本   ^^上两个版本
9、git reset --hard XXXXX     回滚到某个版本号   XXXX是某一个版本号
10、git reflog    记录每次命令
11、git checkout -- XXX  让XXX文件回到最近一次的git commit或者 git add
		--很重要，没有--，就变成了“切换到另一个分支”的命令
12、git rm XXX   删除XXX文件
		然后 git commit -m “” 提交后彻底删除
github
账号 liujian1992git
密码 liujian@1992
创建创建SSH Key
ssh-keygen -t rsa -C "m13685426315@163.com"

git remote add origin git@github.com:liujian1992git/learngit.git
将本地库推到GitHUb库  origin代表远程库可更改为其他名
origin代表远程库可更改为其他名
git push -u origin master
将本地库推送至远程库上

git push origin master
只要本地提交，就可以通过该命令将最新的master最新分支推送至GitHub

git checkout -b dev    --创建dev分支并且切换至dev
git branch             --查看当前分支
git checkout master    ---切换回主分支
git merge dev 				 ---把dev分支的工作成果合并到master分支上
git branch -d dev      ---将dev分支删除
git switch -c dev      ---创建并切换dev分支
git switch master      ---切换为主分支
git log --graph 查看分支合并图
git merge --no-ff -m "merge with no-ff" dev 合并dev分支 加了merge with no-ff注释  --no-ff参数，表示禁用Fast forward
git stash              ---将现场隐藏用来修复bug
git cherry-pick <commit>   ---把bug提交的修改“复制”到当前分支
git branch -D <name>   ---强行删除未合并的分支
git remote -v          ---查看远程库信息

本地新建的分支如果不推送到远程，对其他人就是不可见的
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

git tag <name>  打一个标签
git tag         查看所有标签
git log --pretty=oneline --abbrev-commit
git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id
git tag -a <tagname> -m "blablabla..."可以指定标签信息
git tag可以查看所有标签

git push origin <tagname>   ---推送本地标签
git push origin --tags      ---推送全部未推送过的本地标签
git tag  -d <tagname>       ---删除一个本地标签
git push origin :refs/tags/<tagname>    ---删除远程标签

git clone git@github.com:liujian1992git/bootstrap.git
